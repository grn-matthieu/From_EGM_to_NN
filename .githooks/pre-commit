#!/usr/bin/env bash
set -euo pipefail

# ---------- repo root & paths ----------
REPO_ROOT="$(git rev-parse --show-toplevel)"
cd "$REPO_ROOT" || exit 1

# choose sysimage extension by OS
case "${OSTYPE:-}" in
  darwin*) SYS_EXT="dylib" ;;
  msys*|cygwin*|win32*) SYS_EXT="dll" ;;
  *) SYS_EXT="so" ;;
esac

SYSIMG_PATH="$REPO_ROOT/ThesisDeps.$SYS_EXT"   # <-- use your sysimage
JULIA_BIN="${JULIA_BIN:-julia}"

# ---------- minimal utils ----------
step(){ echo "[$(date +%H:%M:%S)] $*"; }

# ---------- format only staged .jl ----------
mapfile -t JLFILES < <(git diff --cached --name-only --diff-filter=ACMRT | grep -E '\.jl$' || true)
if [ ${#JLFILES[@]} -gt 0 ]; then
  step "Formatting staged Julia files..."
  unset JULIA_PROJECT
  if [ -f "$SYSIMG_PATH" ]; then
    "$JULIA_BIN" -q -J "$SYSIMG_PATH" -e '
      try
        import JuliaFormatter
        for f in Base.ARGS
          JuliaFormatter.format_file(f)
        end
      catch
        println(">>> JuliaFormatter not available; skipping formatting of staged Julia files.")
      end
    ' "${JLFILES[@]}"
  else
    "$JULIA_BIN" -q -e '
      try
        import JuliaFormatter
        for f in Base.ARGS
          JuliaFormatter.format_file(f)
        end
      catch
        println(">>> JuliaFormatter not available; skipping formatting of staged Julia files.")
      end
    ' "${JLFILES[@]}"
  fi
  git add "${JLFILES[@]}"
else
  step "No staged Julia files to format."
fi

# ---------- skip tests for doc-only commits ----------
DOC_ONLY=true
if git diff --cached --name-only --diff-filter=ACMRT | grep -Eq '\.jl$|(^|/)Project\.toml$|(^|/)Manifest\.toml$'; then
  DOC_ONLY=false
fi

if $DOC_ONLY; then
  step "Doc-only commit detected â†’ skipping tests."
  exit 0
fi

# ---------- run package tests ----------
step "Running tests for ThesisProject (dev mode, external Julia env)..."
unset JULIA_PROJECT
if [ -f "$SYSIMG_PATH" ]; then
  step "Using sysi
